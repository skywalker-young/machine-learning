class Node:
    def __init__(self,value):
        self.left=None
        self.right=None
        self.value=value


class Tree:
    def __init__(self):
        self.size=1
        self.root=Node('root')

    def is_operator(self,root):
        if (root.value=='+'or root.value=='-'or root.value=='*'or root.value=='/' ):
            return 2
        else:
            return 1
    def infix(self,root):
        equation=[]
        if root.value is not None:
            self.infix(root.left)
            equation.extend(root.value)
            self.infix(root.right)


    def evaluateExpressionTree(self,root):
        if root is None: #empty tree
            return 0
        #leaf node
        if root.left is None and root.right is None:
            return int(root.value)

        left_sum=self.evaluateExpressionTree(root.left)
        right_sum=self.evaluateExpressionTree(root.right)

        if root.value=='+':
            return left_sum + right_sum
        elif root.value=='-':
            return left_sum-right_sum
        elif root.value=='*':
            return left_sum*right_sum
        elif root.value=='/':
            return left_sum/right_sum







tree=Tree()
tree.root.value='+'
tree.root.left=Node('*')
tree.root.right=Node('-')
tree.root.left.left=Node('4')
tree.root.left.right=Node('6')
tree.root.right.left=Node('6')
tree.root.right.right=Node('3')
print(tree.root.value)
print(tree.root.left.value)
print(tree.root.right.value)

a=tree.evaluateExpressionTree(tree.root)
print('a',a)
